
def buildPrime(n):
    isPrime = [True]*(n+1)
    i=2
    while(i*i<=n):
        if isPrime[i]:
            for j in range(i*i,n+1,i):
                isPrime[j]=False
        i+=1


    return isPrime

NN=20000
PRIMES=[]

isPrime = buildPrime(NN)


for i in range(2,NN):
    if isPrime[i]:
        PRIMES.append(i)

def factorize(X):
    if X%2==0:
        return 2, X//2

    for p in PRIMES:
        if p*p > X:
            return 1, X

        if X%p==0:
            return p, X//p

    return 1, X



def solve(N,L,Q):
    primes = set()

    result = []

    for q in Q:
        x, y = factorize(q)
        primes.add(x)
        primes.add(y)

        if len(result)==0:
            result.append(x)
            result.append(y)
            continue
        elif len(result)==2:
            if x==result[0] or y==result[0]:
                result=[result[1], result[0]]

        if x==result[-1]:
            result.append(y)
        else:
            result.append(x)

    primeList = sorted(primes)

    primeDict = dict()

    for i in range(26):
        primeDict[primeList[i]]=chr(ord('A')+i)

    #print(primeDict)

    #print(result)


    return "".join([primeDict[x] for x in result])


T =int(input())
for i in range(T):
    N, L = map(int, input().split())
    Q = map(int, input().split())

    print("Case #%d: %s" % (i+1, solve(N,L,Q)))
